---
source: src/parser/test.rs
description: "let x = if (true) { 1 } else { 2 };"
expression: result
---
[
    Let {
        token: Token(Let, "let", (0,0)->(0,3)),
        name: Identifier {
            token: Token(Identifier, "x", (0,4)->(0,5)),
            name: "x",
        },
        value: If {
            token: Token(If, "if", (0,8)->(0,10)),
            condition: Ok(
                Bool {
                    token: Token(True, "true", (0,12)->(0,16)),
                    value: true,
                },
            ),
            consequence: Ok(
                Block {
                    token: Token(LBrace, "{", (0,18)->(0,19)),
                    statements: [
                        Int {
                            token: Token(Int, "1", (0,20)->(0,21)),
                            value: 1,
                        },
                    ],
                    start: (0,18),
                    end: (0,22),
                },
            ),
            alternative: Ok(
                Some(
                    Block {
                        token: Token(LBrace, "{", (0,29)->(0,30)),
                        statements: [
                            Int {
                                token: Token(Int, "2", (0,31)->(0,32)),
                                value: 2,
                            },
                        ],
                        start: (0,29),
                        end: (0,33),
                    },
                ),
            ),
        },
    },
]

===================================

let x = if (true) { 1 } else { 2 };
